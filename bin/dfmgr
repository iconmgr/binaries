#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename "$0")"
VERSION="202103310710-git"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts
trap '[ -f "$DFMGR_TEMP_FILE" ] && rm -Rf "$DFMGR_TEMP_FILE" &>/dev/null' EXIT

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202103310710-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : WTFPL
# @ReadME        : dfmgr --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Wednesday, Mar 31, 2021 07:10 EDT
# @File          : dfmgr
# @Description   : DotFiles ManaGeR
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/master/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# user system devenv dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
dfmgr_install
__options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_config() {
  printf_green "Generating the config file in"
  printf_green "$DFMGR_CONFIG_DIR/$DFMGR_CONFIG_FILE"
  [ -d "$DFMGR_CONFIG_DIR" ] || mkdir -p "$DFMGR_CONFIG_DIR"
  [ -d "$DFMGR_CONFIG_BACKUP_DIR" ] || mkdir -p "$DFMGR_CONFIG_BACKUP_DIR"
  [ -f "$DFMGR_CONFIG_DIR/$DFMGR_CONFIG_FILE" ] &&
    cp -Rf "$DFMGR_CONFIG_DIR/$DFMGR_CONFIG_FILE" "$DFMGR_CONFIG_DIR/$DFMGR_CONFIG_FILE.$$"
  cat <<EOF >"$DFMGR_CONFIG_DIR/$DFMGR_CONFIG_FILE"
# Settings for dfmgr - unused
DFMGR_GIT_REPO="https://github.com/dfmgr"
DFMGR_DOTFILES_DIR="${PERSONAL_DOTFILES_DIR:-$HOME/.local/dotfiles/personal}"
DFMGR_FORCE_INSTALL="false"
DFMGR_NOTIFY_ENABLED="yes"
DFMGR_NOTIFY_CLIENT_NAME="\${NOTIFY_CLIENT_NAME:-\$APPNAME}"
DFMGR_NOTIFY_CLIENT_ICON="\${NOTIFY_CLIENT_ICON:-\$DFMGR_NOTIFY_CLIENT_ICON}"
DFMGR_TEMP_FILE="${TMPDIR:-/tmp}/dfmgr"
DFMGR_CLONE_DIR="$HOME/Projects/github/dfmgr"
EOF
  if [ -f "$DFMGR_CONFIG_DIR/$DFMGR_CONFIG_FILE" ]; then
    printf_green "Your config file for dfmgr has been created"
    true
  else
    printf_red "Failed to create the config file"
    false
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gpg_import() {
  gpg --import "$1"/*.gpg 2>/dev/null
  gpg --import "$1"/*.sec 2>/dev/null
  gpg --import "$1"/*.asc 2>/dev/null
  gpg --import-ownertrust "$1"/*.trust 2>/dev/null
  return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__download() {
  REPO_NAME="$1"
  REPO_URL="$DFMGR_GIT_REPO/$REPO_NAME"
  DIR_NAME="$DFMGR_CLONE_DIR/$REPO_NAME"
  gitadmin clone "$REPO_URL" "$DIR_NAME"
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
df_personal() {
  shift 1
  local dir="${PERSONAL_DOTFILES_DIR:-$DFMGR_DOTFILES_DIR}"
  if [ -f "$dir/install.sh" ]; then
    bash -c "$dir/install.sh"
    __getexitcode "Personal dotfiles has been updated"
  elif [ -f "$dir/update.sh" ]; then
    bash -c "$dir/update.sh"
    __getexitcode "Personal dotfiles has been updated"
  elif [ -d "$dir/.git" ]; then
    printf_purple "Updating your personal files"
    git -C "$dir" pull -q &&
      cp -Rfa "$dir"/etc/skel/. ~/ &&
      __gpg_import "$dir/tmp" &&
      __getexitcode "Personal dotfiles has been updated"
  else
    printf_red "Can't install your personal dotfiles"
  fi
}
__list_available() {
  echo -e 'alacritty asciinema awesome bash bashtop bspwm byobu caja castero chromium cmus deadbeef deadd dircolors dunst easytag emacs firefox fish geany git gtk-2.0 gtk-3.0 guake htop i3 jgmenu lemonbar lf misc mpd mutt nano neofetch neovim newsboat nitrogen nodejs openbox pianobar picard polybar qterminal qtile ranger remmina rofi ruby sakura screen smplayer smtube sway sxhkd terminology termite thunar tig tint2 tmux transmission variety vifm vim volumeicon xfce4 xfce4-terminal xmonad youtube-dl youtube-viewer ytmdl zsh' | tr ' ' '\n'
  exit 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Defaults
exitCode=""
DFMGR_CONFIG_FILE="settings.conf"
DFMGR_CONFIG_DIR="$HOME/.config/myscripts/dfmgr"
DFMGR_CONFIG_BACKUP_DIR="$HOME/.local/share/myscripts/dfmgr/backups"
DFMGR_OPTIONS_DIR="$HOME/.local/share/myscripts/dfmgr/options"
DFMGR_TEMP_FILE="${TMPDIR:-/tmp}/dfmgr"
DFMGR_NOTIFY_ENABLED="yes"
DFMGR_NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$APPNAME}"
DFMGR_NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$DFMGR_NOTIFY_CLIENT_ICON}"
DFMGR_DOTFILES_DIR="${PERSONAL_DOTFILES_DIR:-$HOME/.local/dotfiles/personal}"
DFMGR_FORCE_INSTALL="false"
DFMGR_GIT_REPO="https://github.com/dfmgr"
DFMGR_CLONE_DIR="$HOME/Projects/github/dfmgr"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set additional variables/Argument/Option settings
SETARGS="$*"
SHORTOPTS="c,v,h,f,l,a"
LONGOPTS="options,config,version,help,force,list,all"
ARRAY="list search available personal update install cron version remove clone download"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate Files
[ -f "$DFMGR_CONFIG_DIR/$DFMGR_CONFIG_FILE" ] || __gen_config &>/dev/null
[ -f "$DFMGR_OPTIONS_DIR/options" ] || __list_options "$DFMGR_OPTIONS_DIR" &>/dev/null
[ -f "$DFMGR_OPTIONS_DIR/array" ] || __list_array "$DFMGR_OPTIONS_DIR" "$ARRAY" &>/dev/null
[ -f "$DFMGR_OPTIONS_DIR/available" ] || __list_available >"$DFMGR_OPTIONS_DIR/available" 2>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
if [ -f "$DFMGR_CONFIG_DIR/$DFMGR_CONFIG_FILE" ]; then
  . "$DFMGR_CONFIG_DIR/$DFMGR_CONFIG_FILE"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case $1 in
  --options)
    shift 1
    __list_array "$DFMGR_OPTIONS_DIR" "$ARRAY"
    __list_options "$DFMGR_OPTIONS_DIR"
    __list_available >"$DFMGR_OPTIONS_DIR/available"
    exit $?
    ;;
  -v | --version)
    shift 1
    __version
    exit $?
    ;;
  -h | --help)
    shift 1
    __help
    exit $?
    ;;
  -c | --config)
    shift 1
    __gen_config
    exit $?
    ;;
  -f | --force)
    shift 1
    export FORCE_INSTALL="true"
    ;;
  -l | --list)
    shift 1
    __list_available
    ;;
  -a | --all)
    shift 1
    INSTALL_ALL="true"
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
unset setopts
#set -- "$SETARGS"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
export NOTIFY_CLIENT_NAME="${DFMGR_NOTIFY_CLIENT_NAME}"
export NOTIFY_CLIENT_ICON="${DFMGR_NOTIFY_CLIENT_ICON}"
if [ "$DFMGR_NOTIFY_ENABLED" = "yes" ]; then
  __notifications() {
    notifications "$*" || return 1
  }
else
  __notifications() { false; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
cmd_exists --error bash || exit 1
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables
export DFMGRREPO="$DFMGR_GIT_REPO"
export REPO="$DFMGRREPO"
export APPDIR="$CONF"
export INSTDIR="$SHARE/CasjaysDev/$SCRIPTS_PREFIX"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case $1 in
list)
  shift 1
  run_install_list "$@"
  ;;

search)
  shift 1
  run_install_search "$@"
  ;;

available)
  shift 1
  run_install_available
  ;;

personal)
  shift 1
  df_personal && __notifications "Install/Update of personal dotfiles completed" || __notifications "Install/Update of personal dotfiles has failed"
  ;;

remove)
  shift 1
  if [ "$INSTALL_ALL" = "true" ]; then
    LISTARRAY="$(ls -A "$USRUPDATEDIR" 2>/dev/null)"
  else
    LISTARRAY="$*"
  fi
  [ ${#LISTARRAY} -ne 0 ] || printf_exit "No packages selected for removal"
  for rmf in $LISTARRAY; do
    MESSAGE="Removing $rmf from $CONF"
    APPNAME="$rmf"
    installer_delete "$APPNAME"
    echo ""
  done
  ;;

update)
  shift 1
  if [ $# -eq 0 ] || [ "$INSTALL_ALL" = "true" ]; then
    LISTARRAY="$(ls -A "$USRUPDATEDIR" 2>/dev/null)"
  else
    LISTARRAY="$*"
  fi
  if [ $# -ne 0 ]; then
    for ins in $LISTARRAY; do
      APPNAME="$ins"
      run_install_update "$APPNAME"
    done
  elif [[ -d "$USRUPDATEDIR" ]] && [[ ${#LISTARRAY} -ne 0 ]]; then
    for upd in $(ls "$USRUPDATEDIR"); do
      APPNAME="$upd"
      run_install_update "$APPNAME"
    done
  else
    printf_yellow "There doesn't seem to be any packages installed"
    __notifications "There doesn't seem to be any packages installed"
  fi
  exit $?
  ;;

install)
  shift 1
  if [ "$INSTALL_ALL" = "true" ]; then
    LISTARRAY="$(__list_available)"
  elif [ $# -eq 0 ]; then
    printf_blue "No packages provide running the updater"
    run_install_update
    exit $?
  else
    LISTARRAY="$*"
  fi
  for ins in $LISTARRAY; do
    APPNAME="$ins"
    run_install_update "$APPNAME"
  done
  exit $?
  ;;

clone | download)
  shift 1
  if [ "$INSTALL_ALL" = "true" ]; then
    LISTARRAY="$(__list_available)"
  elif [ $# -ne 0 ]; then
    LISTARRAY="$*"
    for pkgs in $LISTARRAY; do
      __download "$pkgs"
    done
  else
    printf_exit "No packages selected for download"
  fi
  ;;

cron)
  shift 1
  LISTARRAY="$*"
  for cron in $LISTARRAY; do
    APPNAME="$cron"
    cron_updater "$APPNAME"
  done
  ;;

version)
  shift 1
  LISTARRAY="$*"
  for ver in $LISTARRAY; do
    APPNAME="$ver"
    run_install_version "$APPNAME"
  done
  ;;

*)
  __help
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-$?}
